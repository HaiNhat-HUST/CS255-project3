// controllers/authController.js
const User = require('../models/User');
const generateToken = require('../utils/generateToken'); // You'll create this helper
const crypto = require('crypto');
const bcrypt = require('bcryptjs');

// @desc    Register a new user
// @route   POST /api/auth/register
// @access  Public
exports.registerUser = async (req, res) => {
  const { username, email, password } = req.body;

  try {
    if (!username || !email || !password) {
      return res.status(400).json({ message: 'Please provide username, email, and password' });
    }

    const userExists = await User.findOne({ $or: [{ email }, { username }] });

    if (userExists) {
      return res.status(400).json({ message: 'User already exists with this email or username' });
    }

    //Gen clientSalt
    const clientSalt = crypto.randomBytes(16).toString('base64');

    //Hash the password
    const saltRounds = parseInt(process.env.BCRYPT_SALT_ROUNDS) || 10;
    const salt = await bcrypt.genSalt(saltRounds);
    const passwordHash = await bcrypt.hash(password, salt);

    // The password will be hashed and clientSalt generated by the pre-save hook in User.js
    const user = new User({
      username,
      email,
      passwordHash: password, // Pass the plain password, it will be hashed by the model
      clientSalt,
    });
    await user.save();

    if (user) {
      res.status(201).json({
        _id: user._id,
        username: user.username,
        email: user.email,
        clientSalt: user.clientSalt, // Send salt for client-side key derivation
        token: generateToken(user._id),
      });
    } else {
      res.status(400).json({ message: 'Invalid user data' });
    }
  } catch (error) {
    console.error("Registration Error:", error);
    res.status(500).json({ message: 'Server error during registration', error: error.message });
  }
};

// @desc    Auth user & get token (Login)
// @route   POST /api/auth/login
// @access  Public
exports.loginUser = async (req, res) => {
  const { email, password } = req.body;

  try {
    if (!email || !password) {
      return res.status(400).json({ message: 'Please provide email/username and password' });
    }
    const user = await User.findOne({
      $or: [{ email: email }, { username: email }],
    });
    if (!user) {
      return res.status(401).json({ messages: 'Invalid email/username or password' });
    }
    const isMatch = await bcrypt.compare(password, user.passwordHash);

    if (!isMatch) {
      return res.status(401).json({ messages: 'Invalid email/username or password' })
    }

    res.json({
      _id: user._id,
      username: user.username,
      email: user.email,
      clientSalt: user.clientSalt, // Send salt for client-side key derivation
      token: generateToken(user._id),
    });
  } catch (error) {
    console.error("Login Error:", error);
    res.status(500).json({ message: 'Server error during login', error: error.message });
  }
};

// @desc    Get user profile (example protected route)
// @route   GET /api/auth/me
// @access  Private
exports.getUserProfile = async (req, res) => {
  // req.user is set by the authMiddleware
  const user = await User.findById(req.user.id).select('-passwordHash'); // Exclude passwordHash
  if (user) {
    res.json({
      _id: user._id,
      username: user.username,
      email: user.email,
      clientSalt: user.clientSalt,
    });
  } else {
    res.status(404).json({ message: 'User not found' });
  }
};